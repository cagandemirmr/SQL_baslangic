import sqlite3 as sql
while True:
    baglanti=sql.connect("veritabani.db")
    x=baglanti.cursor()
    name=input("Ad Soyad:")
    vize_notu=input("Vize:") #integer a çevirmeyiz çünkü sql de bu değer string dir.

    z="INSERT INTO ogrenci(adsoyad,vize) VALUES ('"+name+"','"+vize_notu+"')"
#Burada önemli olan husus değişkenlerin önüne "+" işaretinin konulması ve '"+....+"' şeklinde değerlerin yazılmasıdır. 
    #"'+deger+'"
    x.execute(z)
    baglanti.commit()

    y="SELECT adsoyad,vize FROM ogrenci"
    #SELECT ile FROM arasına istediğimiz parametreleri seçebiliriz.
    x.execute(y)
    kayitlar=x.fetchall()
    for i in kayitlar:
        print(i)
    baglanti.close()
////////////////////////////////////////////
import sqlite3 as sql

baglanti = sql.connect("veritabani.db")
x = baglanti.cursor()

name = input("Öğrenci adını giriniz: ")
vize_notu = int(input("Öğrenci vize notunu giriniz: "))

# Use placeholders in the query to avoid SQL injection
z = "INSERT INTO ogrenci(adsoyad, vize) VALUES (?, ?)"
x.execute(z, (name, vize_notu))

baglanti.commit()

y = "SELECT * FROM ogrenci"
x.execute(y)
kayitlar = x.fetchall()

for i in kayitlar:
    print(i)

baglanti.close()
In this corrected version:

I added spaces and corrected the quotes in the z query string.
I used placeholders (?) in the SQL query to prevent SQL injection. This is a safer way to insert variables into your SQL queries.
I removed unnecessary double quotes around the name and vize_notu variables in the z query string.
I added a space after the prompt for the vize_notu input.
Make sure that the table ogrenci exists in your database with the columns adsoyad and vize before running the code.


-------------------------------
import sqlite3 as sql
while True:
    baglanti=sql.connect("veritabani.db")
    x=baglanti.cursor()
    name=input("Ad Soyad:")
    vize_notu=input("Vize:")

    z="INSERT INTO ogrenci(adsoyad,vize) VALUES ('"+name+"','"+vize_notu+"')"
    x.execute(z)
    baglanti.commit()

    kayit_listesi=[
        ("Ahmet Fehim","50"),
        ("adfjdsb sdfjn","60"),
        ("sdfdsf dsjfbds","90"),
        ("dsfhbdsf jskdfhds","10")
    ]
    ekle="INSERT INTO ogrenci (adsoyad,vize) VALUES (?,?)"
    #veri adedini bilmiyorsak soru işareti yaparız kendisi otomatik doldurur.
    x.executemany(ekle,kayit_listesi)
#Eğer birden fazla veri ekelenecekse o zaman executemany() kullanılır.
    baglanti.commit()

    y="SELECT adsoyad,vize FROM ogrenci"
    x.execute(y)
    kayitlar=x.fetchall()
    for i in kayitlar:
        print(i)
    baglanti.close()
-------------------------------------
import sqlite3 as sql
while True:
    baglanti=sql.connect("veritabani.db")
    x=baglanti.cursor()
    name=input("Ad Soyad:")
    vize_notu=input("Vize:")

    z="INSERT INTO ogrenci(adsoyad,vize) VALUES ('"+name+"','"+vize_notu+"')"
    x.execute(z)
    baglanti.commit()

    kayit_listesi=[
        ("Ahmet Fehim","50"),
        ("adfjdsb sdfjn","60"),
        ("sdfdsf dsjfbds","90"),
        ("dsfhbdsf jskdfhds","10")
    ]
    ekle="INSERT INTO ogrenci (adsoyad,vize) VALUES (?,?)"
    x.executemany(ekle,kayit_listesi)
    baglanti.commit()

    y="SELECT * FROM ogrenci ORDER BY id DESC"
    #LIMIT yazınca direkt  kısıtlama yapar.
    #DESC ile veriler ters gösterilir.

    x.execute(y)
    kayitlar=x.fetchall()
    for i in kayitlar:
        print(i)
    baglanti.close()
---------------------------------
import _sqlite3 as sql
baglanti=sql.connect("veritabani.db")
x=baglanti.cursor()

y="SELECT adsoyad,vize FROM ogrenci"
#SELECT ten sonra istediğimiz her şeyi aratabileceğimiz gibi sadece adsoyad ve vize paremetrelerini de arayabiliriz.
x.execute(y)
kayitlar=x.fetchall()
for i in  kayitlar:
    print(i)


z="INSERT INTO ogrenci(adsoyad,vize) VALUES ('Çağan Demir',100)"
#bir şey eklemek istiyorsak önce tablonun adı(değer1,değer2) yazılır.
x.execute(z)
baglanti.commit()
baglanti.close()
